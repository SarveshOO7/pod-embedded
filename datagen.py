#!/usr/bin/python3

import json

DATA_JSON_FILENAME = "datagen.json"
DATA_HEADER_FILENAME = "testdata.h"

def load_schema():
    schema = {}
    with open(DATA_JSON_FILENAME, "r") as f:
        schema = json.load(f)
    return schema

def search_schema(src, target):
    if type(val) != dict:
        return src == target

    for key, val in src.items():
        search_schema(val, target)
    
        
def build_data_struct(subStructNames):
    masterData = []
    for name in subStructNames:
        masterData.append({"name": name, "type": apply_naming_convention(name)})
    return build_struct("data", masterData)
    

def build_data_h(dataHStr):
    with open(DATA_HEADER_FILENAME, "w") as f:
        f.write(dataHStr)        
    return

def apply_naming_convention(name):
    return str(name) + "_t"

def build_struct(title, dataMembers):
    title = apply_naming_convention(title)
    structString = "typedef struct {} ".format(title)
    structString += "{\n"
    for member in dataMembers:
        structString += "\t{} {};\n".format(member["type"], member["name"])
    structString += "}"
    structString += " {};\n\n\n".format(title)
    return structString

def build_header(deps):
    header = """
/****************************************************************************
*****************************************************************************
** Be very careful! This is an autogenerated file so any changes you
** make will likely be erased. If you want to add fields or other information
** add it to the data.json document, then run 'python datagen.py' to rebuild
** this file
****************************************************************************
****************************************************************************/\n\n
"""
    for dep in deps:
        header += "#include <{}>\n".format(dep)
    header += "\n\n"
    return header

def slap_a_comment_on_that_bad_boy():
    return "/***\n*\n* Describe this struct here\n*\n***/\n\n"

def build_limits(limits):
    limitStr = "/***\n*Limits for the state machine\n***/\n"
    for name,data in limits.items():
        limitStr += "#define {}_MIN {}\n".format(name, data["min"]))
        limitStr += "#define {}_MAX {}\n".format(name, data["max"]))
    limitStr += "\n\n"
    return limitStr

def main():
    schema = load_schema()
    dataHStr = ""
    print(schema)
    defines = ""
    includes = ""
    structs = ""

    includes += build_header(schema["dependencies"]) 
    structs += build_data_struct(schema["data"].keys())
    for key, val in schema["data"].items():
        structs += slap_a_comment_on_that_bad_boy()
        structs += build_struct(key, val)

    # List in the order you want it added to the final file
    build_data_h(dataHStr)
#    print(dataHStr)
    return
    
if __name__ == "__main__":
    main()
