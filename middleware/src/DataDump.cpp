/* 
 * Please note that this is an auto-generated file which is automatically generated whenever a target is built.
 */

#include <unistd.h>
#include <stdio.h>
#include <string>
#include <pthread.h>

#include <iostream>
#include <fstream>

#include "DataDump.h"
#include "data.h"

pthread_t dataDumpThread;

extern data_t *data;

/* Setup PThread Loop */
void SetupDataDump(){
    if (pthread_create(&dataDumpThread, NULL, DataLoop, NULL))
        std::cerr << "Error creating data dump thread.\n";
}

// Get current date/time, format is YYYY-MM-DD - HH:mm:ss
void currentDateTime(char *buf, int bufferLength) {
    time_t     now = time(0);
    struct tm  tstruct;
    tstruct = *localtime(&now);
    // Visit http://en.cppreference.com/w/cpp/chrono/c/strftime
    // for more information about date/time format
    strftime(buf, bufferLength, "%Y-%m-%d - %X", &tstruct);
}


/* Thread Loop */
void *DataLoop(void *arg){

    (void) arg;

    char timestamp[50];
    currentDateTime(timestamp, 50);

    std::string filePath = "/home/daniel/Desktop/Badgerloop/master-aligned/pod-embedded/cmake-build-debug/../data_logs/";

    std::ofstream logFile(filePath.append("telemetryDump - ").append(timestamp).append(".log"));
    if(!logFile.is_open()){
        std::cerr << "Error opening log file.\n";
        return 0;
    }

    while(true){
        currentDateTime(timestamp, 50);
        logFile << "\n" << timestamp << ":\n";

        
        /* Autogenerated Code Begins */
        logFile << "data -> state:  " << std::to_string(data -> state) << "\n";
        logFile << "data -> pressure -> primTank:  " << std::to_string(data -> pressure -> primTank) << "\n";
        logFile << "data -> pressure -> primLine:  " << std::to_string(data -> pressure -> primLine) << "\n";
        logFile << "data -> pressure -> primAct:  " << std::to_string(data -> pressure -> primAct) << "\n";
        logFile << "data -> pressure -> secTank:  " << std::to_string(data -> pressure -> secTank) << "\n";
        logFile << "data -> pressure -> secLine:  " << std::to_string(data -> pressure -> secLine) << "\n";
        logFile << "data -> pressure -> secAct:  " << std::to_string(data -> pressure -> secAct) << "\n";
        logFile << "data -> pressure -> amb:  " << std::to_string(data -> pressure -> amb) << "\n";
        logFile << "data -> pressure -> pv:  " << std::to_string(data -> pressure -> pv) << "\n";
        logFile << "data -> motion -> pos:  " << std::to_string(data -> motion -> pos).append("f") << "\n";
        logFile << "data -> motion -> vel:  " << std::to_string(data -> motion -> vel).append("f") << "\n";
        logFile << "data -> motion -> accel:  " << std::to_string(data -> motion -> accel).append("f") << "\n";
        logFile << "data -> motion -> retroCount:  " << std::to_string(data -> motion -> retroCount) << "\n";
        logFile << "data -> motion -> missedRetro:  " << std::to_string(data -> motion -> missedRetro) << "\n";
        logFile << "data -> bms -> packCurrent:  " << std::to_string(data -> bms -> packCurrent).append("f") << "\n";
        logFile << "data -> bms -> packVoltage:  " << std::to_string(data -> bms -> packVoltage).append("f") << "\n";
        logFile << "data -> bms -> imdStatus:  " << std::to_string(data -> bms -> imdStatus) << "\n";
        logFile << "data -> bms -> packDCL:  " << std::to_string(data -> bms -> packDCL) << "\n";
        logFile << "data -> bms -> packCCL:  " << std::to_string(data -> bms -> packCCL) << "\n";
        logFile << "data -> bms -> packResistance:  " << std::to_string(data -> bms -> packResistance) << "\n";
        logFile << "data -> bms -> packHealth:  " << std::to_string(data -> bms -> packHealth) << "\n";
        logFile << "data -> bms -> packOpenVoltage:  " << std::to_string(data -> bms -> packOpenVoltage).append("f") << "\n";
        logFile << "data -> bms -> packCycles:  " << std::to_string(data -> bms -> packCycles) << "\n";
        logFile << "data -> bms -> packAh:  " << std::to_string(data -> bms -> packAh) << "\n";
        logFile << "data -> bms -> inputVoltage:  " << std::to_string(data -> bms -> inputVoltage).append("f") << "\n";
        logFile << "data -> bms -> Soc:  " << std::to_string(data -> bms -> Soc) << "\n";
        logFile << "data -> bms -> relayStatus:  " << std::to_string(data -> bms -> relayStatus) << "\n";
        logFile << "data -> bms -> highTemp:  " << std::to_string(data -> bms -> highTemp) << "\n";
        logFile << "data -> bms -> lowTemp:  " << std::to_string(data -> bms -> lowTemp) << "\n";
        logFile << "data -> bms -> avgTemp:  " << std::to_string(data -> bms -> avgTemp) << "\n";
        logFile << "data -> bms -> cellMaxVoltage:  " << std::to_string(data -> bms -> cellMaxVoltage).append("f") << "\n";
        logFile << "data -> bms -> cellMinVoltage:  " << std::to_string(data -> bms -> cellMinVoltage).append("f") << "\n";
        logFile << "data -> bms -> cellAvgVoltage:  " << std::to_string(data -> bms -> cellAvgVoltage) << "\n";
        logFile << "data -> bms -> maxCells:  " << std::to_string(data -> bms -> maxCells) << "\n";
        logFile << "data -> bms -> numCells:  " << std::to_string(data -> bms -> numCells) << "\n";
        logFile << "data -> rms -> igbtTemp:  " << std::to_string(data -> rms -> igbtTemp) << "\n";
        logFile << "data -> rms -> gateDriverBoardTemp:  " << std::to_string(data -> rms -> gateDriverBoardTemp) << "\n";
        logFile << "data -> rms -> controlBoardTemp:  " << std::to_string(data -> rms -> controlBoardTemp) << "\n";
        logFile << "data -> rms -> motorTemp:  " << std::to_string(data -> rms -> motorTemp) << "\n";
        logFile << "data -> rms -> motorSpeed:  " << std::to_string(data -> rms -> motorSpeed) << "\n";
        logFile << "data -> rms -> phaseACurrent:  " << std::to_string(data -> rms -> phaseACurrent) << "\n";
        logFile << "data -> rms -> phaseBCurrent:  " << std::to_string(data -> rms -> phaseBCurrent) << "\n";
        logFile << "data -> rms -> phaseCCurrent:  " << std::to_string(data -> rms -> phaseCCurrent) << "\n";
        logFile << "data -> rms -> dcBusVoltage:  " << std::to_string(data -> rms -> dcBusVoltage) << "\n";
        logFile << "data -> rms -> lvVoltage:  " << std::to_string(data -> rms -> lvVoltage) << "\n";
        logFile << "data -> rms -> canCode1:  " << std::to_string(data -> rms -> canCode1) << "\n";
        logFile << "data -> rms -> canCode2:  " << std::to_string(data -> rms -> canCode2) << "\n";
        logFile << "data -> rms -> faultCode1:  " << std::to_string(data -> rms -> faultCode1) << "\n";
        logFile << "data -> rms -> faultCode2:  " << std::to_string(data -> rms -> faultCode2) << "\n";
        logFile << "data -> rms -> commandedTorque:  " << std::to_string(data -> rms -> commandedTorque) << "\n";
        logFile << "data -> rms -> actualTorque:  " << std::to_string(data -> rms -> actualTorque) << "\n";
        logFile << "data -> rms -> relayState:  " << std::to_string(data -> rms -> relayState) << "\n";
        logFile << "data -> rms -> electricalFreq:  " << std::to_string(data -> rms -> electricalFreq) << "\n";
        logFile << "data -> rms -> dcBusCurrent:  " << std::to_string(data -> rms -> dcBusCurrent) << "\n";
        logFile << "data -> rms -> outputVoltageLn:  " << std::to_string(data -> rms -> outputVoltageLn) << "\n";
        logFile << "data -> rms -> VSMCode:  " << std::to_string(data -> rms -> VSMCode) << "\n";
        logFile << "data -> rms -> keyMode:  " << std::to_string(data -> rms -> keyMode) << "\n";
        logFile << "data -> flags -> readyPump:  " << std::to_string(data -> flags -> readyPump) << "\n";
        logFile << "data -> flags -> pumpDown:  " << std::to_string(data -> flags -> pumpDown) << "\n";
        logFile << "data -> flags -> readyCommand:  " << std::to_string(data -> flags -> readyCommand) << "\n";
        logFile << "data -> flags -> readyToBrake:  " << (data -> flags -> readyToBrake ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> propulse:  " << std::to_string(data -> flags -> propulse) << "\n";
        logFile << "data -> flags -> emergencyBrake:  " << std::to_string(data -> flags -> emergencyBrake) << "\n";
        logFile << "data -> flags -> shouldStop:  " << std::to_string(data -> flags -> shouldStop) << "\n";
        logFile << "data -> flags -> shutdown:  " << std::to_string(data -> flags -> shutdown) << "\n";
        logFile << "data -> flags -> shouldBrake:  " << (data -> flags -> shouldBrake ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> isConnected:  " << (data -> flags -> isConnected ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> brakeInit:  " << (data -> flags -> brakeInit ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> brakePrimAct:  " << (data -> flags -> brakePrimAct ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> brakeSecAct:  " << (data -> flags -> brakeSecAct ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> brakePrimRetr:  " << (data -> flags -> brakePrimRetr ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> brakeSecRetr:  " << (data -> flags -> brakeSecRetr ? "True" : "False" ) << "\n";
        logFile << "data -> flags -> clrMotionData:  " << (data -> flags -> clrMotionData ? "True" : "False" ) << "\n";
        logFile << "data -> timers -> startTime:  " << std::to_string(data -> timers -> startTime) << "\n";
        logFile << "data -> timers -> oldRetro:  " << std::to_string(data -> timers -> oldRetro) << "\n";
        logFile << "data -> timers -> lastRetro:  " << std::to_string(data -> timers -> lastRetro) << "\n";
        logFile << "data -> timers -> lastRetros: [";
        for(int i = 0; i < NUM_RETROS; i++)
        	logFile << std::to_string(data -> timers -> lastRetros[i]) + (i == NUM_RETROS - 1 ? "" : ",");
        logFile << "]\n";
        logFile << "data -> timers -> crawlTimer:  " << std::to_string(data -> timers -> crawlTimer) << "\n";
        /* Autogenerated Code Ends */
        

        logFile << "\n\n";

        logFile.flush();
        usleep(30000);
        break;
    }

}
